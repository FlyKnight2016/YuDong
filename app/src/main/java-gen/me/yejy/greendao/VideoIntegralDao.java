package me.yejy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import me.yejy.greendao.VideoIntegral;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table VIDEO_INTEGRAL.
*/
public class VideoIntegralDao extends AbstractDao<VideoIntegral, Long> {

    public static final String TABLENAME = "VIDEO_INTEGRAL";

    /**
     * Properties of entity VideoIntegral.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Video_name = new Property(1, String.class, "video_name", false, "VIDEO_NAME");
        public final static Property Video_zip = new Property(2, String.class, "video_zip", false, "VIDEO_ZIP");
        public final static Property Video_describe = new Property(3, String.class, "video_describe", false, "VIDEO_DESCRIBE");
        public final static Property Video_style = new Property(4, Integer.class, "video_style", false, "VIDEO_STYLE");
        public final static Property Video_price = new Property(5, String.class, "video_price", false, "VIDEO_PRICE");
        public final static Property See_num = new Property(6, String.class, "see_num", false, "SEE_NUM");
        public final static Property Evaluate_num = new Property(7, String.class, "evaluate_num", false, "EVALUATE_NUM");
        public final static Property Collect_num = new Property(8, String.class, "collect_num", false, "COLLECT_NUM");
        public final static Property Video_url = new Property(9, String.class, "video_url", false, "VIDEO_URL");
        public final static Property Video_addtime = new Property(10, Long.class, "video_addtime", false, "VIDEO_ADDTIME");
        public final static Property Cate_id = new Property(11, Integer.class, "cate_id", false, "CATE_ID");
        public final static Property Video_jifen = new Property(12, String.class, "video_jifen", false, "VIDEO_JIFEN");
    };


    public VideoIntegralDao(DaoConfig config) {
        super(config);
    }
    
    public VideoIntegralDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'VIDEO_INTEGRAL' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'VIDEO_NAME' TEXT NOT NULL ," + // 1: video_name
                "'VIDEO_ZIP' TEXT," + // 2: video_zip
                "'VIDEO_DESCRIBE' TEXT," + // 3: video_describe
                "'VIDEO_STYLE' INTEGER," + // 4: video_style
                "'VIDEO_PRICE' TEXT," + // 5: video_price
                "'SEE_NUM' TEXT," + // 6: see_num
                "'EVALUATE_NUM' TEXT," + // 7: evaluate_num
                "'COLLECT_NUM' TEXT," + // 8: collect_num
                "'VIDEO_URL' TEXT NOT NULL ," + // 9: video_url
                "'VIDEO_ADDTIME' INTEGER," + // 10: video_addtime
                "'CATE_ID' INTEGER," + // 11: cate_id
                "'VIDEO_JIFEN' TEXT);"); // 12: video_jifen
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VIDEO_INTEGRAL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, VideoIntegral entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getVideo_name());
 
        String video_zip = entity.getVideo_zip();
        if (video_zip != null) {
            stmt.bindString(3, video_zip);
        }
 
        String video_describe = entity.getVideo_describe();
        if (video_describe != null) {
            stmt.bindString(4, video_describe);
        }
 
        Integer video_style = entity.getVideo_style();
        if (video_style != null) {
            stmt.bindLong(5, video_style);
        }
 
        String video_price = entity.getVideo_price();
        if (video_price != null) {
            stmt.bindString(6, video_price);
        }
 
        String see_num = entity.getSee_num();
        if (see_num != null) {
            stmt.bindString(7, see_num);
        }
 
        String evaluate_num = entity.getEvaluate_num();
        if (evaluate_num != null) {
            stmt.bindString(8, evaluate_num);
        }
 
        String collect_num = entity.getCollect_num();
        if (collect_num != null) {
            stmt.bindString(9, collect_num);
        }
        stmt.bindString(10, entity.getVideo_url());
 
        Long video_addtime = entity.getVideo_addtime();
        if (video_addtime != null) {
            stmt.bindLong(11, video_addtime);
        }
 
        Integer cate_id = entity.getCate_id();
        if (cate_id != null) {
            stmt.bindLong(12, cate_id);
        }
 
        String video_jifen = entity.getVideo_jifen();
        if (video_jifen != null) {
            stmt.bindString(13, video_jifen);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public VideoIntegral readEntity(Cursor cursor, int offset) {
        VideoIntegral entity = new VideoIntegral( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // video_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // video_zip
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // video_describe
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // video_style
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // video_price
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // see_num
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // evaluate_num
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // collect_num
            cursor.getString(offset + 9), // video_url
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // video_addtime
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // cate_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // video_jifen
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, VideoIntegral entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVideo_name(cursor.getString(offset + 1));
        entity.setVideo_zip(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVideo_describe(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVideo_style(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setVideo_price(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSee_num(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEvaluate_num(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCollect_num(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVideo_url(cursor.getString(offset + 9));
        entity.setVideo_addtime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setCate_id(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setVideo_jifen(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(VideoIntegral entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(VideoIntegral entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
